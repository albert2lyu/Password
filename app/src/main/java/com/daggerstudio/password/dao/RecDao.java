package com.daggerstudio.password.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table REC.
*/
public class RecDao extends AbstractDao<Rec, Long> {

    public static final String TABLENAME = "REC";

    /**
     * Properties of entity Rec.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Site_url = new Property(0, String.class, "site_url", false, "SITE_URL");
        public final static Property Site_brief = new Property(1, String.class, "site_brief", false, "SITE_BRIEF");
        public final static Property User_name = new Property(2, String.class, "user_name", false, "USER_NAME");
        public final static Property Encypted_content = new Property(3, byte[].class, "encypted_content", false, "ENCYPTED_CONTENT");
        public final static Property Note = new Property(4, String.class, "note", false, "NOTE");
        public final static Property Id = new Property(5, Long.class, "id", true, "_id");
    };


    public RecDao(DaoConfig config) {
        super(config);
    }
    
    public RecDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'REC' (" + //
                "'SITE_URL' TEXT," + // 0: site_url
                "'SITE_BRIEF' TEXT NOT NULL ," + // 1: site_brief
                "'USER_NAME' TEXT NOT NULL ," + // 2: user_name
                "'ENCYPTED_CONTENT' BLOB NOT NULL ," + // 3: encypted_content
                "'NOTE' TEXT," + // 4: note
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT );"); // 5: id
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'REC'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Rec entity) {
        stmt.clearBindings();
 
        String site_url = entity.getSite_url();
        if (site_url != null) {
            stmt.bindString(1, site_url);
        }
        stmt.bindString(2, entity.getSite_brief());
        stmt.bindString(3, entity.getUser_name());
        stmt.bindBlob(4, entity.getEncypted_content());
 
        String note = entity.getNote();
        if (note != null) {
            stmt.bindString(5, note);
        }
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(6, id);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5);
    }    

    /** @inheritdoc */
    @Override
    public Rec readEntity(Cursor cursor, int offset) {
        Rec entity = new Rec( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // site_url
            cursor.getString(offset + 1), // site_brief
            cursor.getString(offset + 2), // user_name
            cursor.getBlob(offset + 3), // encypted_content
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // note
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5) // id
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Rec entity, int offset) {
        entity.setSite_url(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setSite_brief(cursor.getString(offset + 1));
        entity.setUser_name(cursor.getString(offset + 2));
        entity.setEncypted_content(cursor.getBlob(offset + 3));
        entity.setNote(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setId(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Rec entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Rec entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
